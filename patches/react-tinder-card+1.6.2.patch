diff --git a/node_modules/react-tinder-card/index.d.ts b/node_modules/react-tinder-card/index.d.ts
index dee80d9..8c6bcb4 100644
--- a/node_modules/react-tinder-card/index.d.ts
+++ b/node_modules/react-tinder-card/index.d.ts
@@ -80,12 +80,32 @@ declare interface Props {
    */
   className?: string
 
+  /**
+   * Style to add to the container.
+   */
+  containerStyle?: React.CSSProperties
+
   /**
    * The children passed in is what will be rendered as the actual Tinder-style card.
    */
   children?: React.ReactNode
+
+  initialPosition?: Direction
+
+  leftComponent?: JSX.Element
+  rightComponent?: JSX.Element
+  downComponent?: JSX.Element
 }
 
 declare const TinderCard: React.FC<Props>
 
-export = TinderCard
+module.exports = {
+  API,
+  CardLeftScreenHandler,
+  Direction,
+  Props,
+  SwipeHandler,
+  SwipeRequirementFufillUpdate,
+  SwipeRequirementUnfufillUpdate,
+  TinderCard,
+}
diff --git a/node_modules/react-tinder-card/index.js b/node_modules/react-tinder-card/index.js
index 7746348..dc59a6e 100644
--- a/node_modules/react-tinder-card/index.js
+++ b/node_modules/react-tinder-card/index.js
@@ -1,27 +1,20 @@
 const React = require('react')
 const { useSpring, animated } = require('@react-spring/web')
 
-const height = window.innerHeight
-const width = window.innerWidth
-
 const settings = {
-  maxTilt: 25, // in deg
+  maxTilt: 20, // in deg
   rotationPower: 50,
   swipeThreshold: 0.5 // need to update this threshold for RN (1.5 seems reasonable...?)
 }
 
 // physical properties of the spring
 const physics = {
-  touchResponsive: {
-    friction: 50,
-    tension: 2000
-  },
   animateOut: {
     friction: 30,
     tension: 400
   },
   animateBack: {
-    friction: 10,
+    friction: 20,
     tension: 200
   }
 }
@@ -35,16 +28,39 @@ const normalize = (vector) => {
   return { x: vector.x / length, y: vector.y / length }
 }
 
-const animateOut = async (gesture, setSpringTarget) => {
-  const diagonal = pythagoras(height, width)
-  const velocity = pythagoras(gesture.x, gesture.y)
-  const finalX = diagonal * gesture.x
-  const finalY = diagonal * gesture.y
-  const finalRotation = gesture.x * 45
-  const duration = diagonal / velocity
+const rotateByDx = (dx) => {
+  return Math.max(Math.min(dx * 0.05, settings.maxTilt), -settings.maxTilt)
+}
+
+const finalXyrot = (gesture) => {
+  const finalX = diagonal() * normalize(gesture).x
+  const finalY = diagonal() * normalize(gesture).y
+  const finalRotation = rotateByDx(finalX)
+
+  return [finalX, finalY, finalRotation];
+}
+
+const diagonal = () => pythagoras(window.innerHeight, window.innerWidth)
+
+const animateOut = async (gesture, setSpringTarget, dir) => {
+  const normalizedGesture = (() => {
+    if (dir === 'right')
+      return { x: Math.max( 2, gesture.x), y: gesture.y }
+    if (dir === 'left')
+      return { x: Math.min(-2, gesture.x), y: gesture.y }
+    if (dir === 'up')
+      return { x: gesture.x              , y: Math.min(-2, gesture.y) }
+    if (dir === 'down')
+      return { x: gesture.x              , y: Math.max( 2, gesture.y) }
+
+    return gesture
+  })();
+
+  const velocity = pythagoras(normalizedGesture.x, normalizedGesture.y)
+  const duration = diagonal() / velocity
 
   setSpringTarget.start({
-    xyrot: [finalX, finalY, finalRotation],
+    xyrot: finalXyrot(normalizedGesture),
     config: { duration: duration }
   })
 
@@ -63,17 +79,20 @@ const animateBack = (setSpringTarget) => {
   })
 }
 
-const getSwipeDirection = (property) => {
+const getSwipeDirection = (
+  property,
+  swipeThreshold = settings.swipeThreshold
+) => {
   if (Math.abs(property.x) > Math.abs(property.y)) {
-    if (property.x > settings.swipeThreshold) {
+    if (property.x > swipeThreshold) {
       return 'right'
-    } else if (property.x < -settings.swipeThreshold) {
+    } else if (property.x < -swipeThreshold) {
       return 'left'
     }
   } else {
-    if (property.y > settings.swipeThreshold) {
+    if (property.y > swipeThreshold) {
       return 'down'
-    } else if (property.y < -settings.swipeThreshold) {
+    } else if (property.y < -swipeThreshold) {
       return 'up'
     }
   }
@@ -85,12 +104,19 @@ const AnimatedDiv = animated.div
 
 const TinderCard = React.forwardRef(
   (
-    { flickOnSwipe = true, children, onSwipe, onCardLeftScreen, className, preventSwipe = [], swipeRequirementType = 'velocity', swipeThreshold = settings.swipeThreshold, onSwipeRequirementFulfilled, onSwipeRequirementUnfulfilled },
+    { flickOnSwipe = true, children, onSwipe, onCardLeftScreen, className, preventSwipe = [], swipeRequirementType = 'velocity', swipeThreshold = settings.swipeThreshold, onSwipeRequirementFulfilled, onSwipeRequirementUnfulfilled, containerStyle, initialPosition, leftComponent, rightComponent, downComponent },
     ref
   ) => {
+    const startPosition = (() => {
+      if (initialPosition === 'left')  return finalXyrot({x: -1, y:  0})
+      if (initialPosition === 'right') return finalXyrot({x:  1, y:  0})
+      if (initialPosition === 'up')    return finalXyrot({x:  0, y: -1})
+      if (initialPosition === 'down')  return finalXyrot({x:  0, y:  1})
+      return [0, 0, 0];
+    })()
+
     const [{ xyrot }, setSpringTarget] = useSpring(() => ({
-      xyrot: [0, 0, 0],
-      config: physics.touchResponsive
+      xyrot: startPosition,
     }))
 
     settings.swipeThreshold = swipeThreshold
@@ -98,16 +124,16 @@ const TinderCard = React.forwardRef(
     React.useImperativeHandle(ref, () => ({
       async swipe (dir = 'right') {
         if (onSwipe) onSwipe(dir)
-        const power = 1.3
+        const power = 2.0
         const disturbance = (Math.random() - 0.5) / 2
         if (dir === 'right') {
           await animateOut({ x: power, y: disturbance }, setSpringTarget)
         } else if (dir === 'left') {
           await animateOut({ x: -power, y: disturbance }, setSpringTarget)
         } else if (dir === 'up') {
-          await animateOut({ x: disturbance, y: power }, setSpringTarget)
-        } else if (dir === 'down') {
           await animateOut({ x: disturbance, y: -power }, setSpringTarget)
+        } else if (dir === 'down') {
+          await animateOut({ x: disturbance, y: power }, setSpringTarget)
         }
         if (onCardLeftScreen) onCardLeftScreen(dir)
       },
@@ -129,12 +155,11 @@ const TinderCard = React.forwardRef(
             if (!preventSwipe.includes(dir)) {
               if (onSwipe) onSwipe(dir)
 
-              await animateOut(swipeRequirementType === 'velocity' ? ({
-                x: gesture.vx,
-                y: gesture.vy
-              }) : (
-                normalize({ x: gesture.dx, y: gesture.dy }) // Normalize to avoid flicking the card away with super fast speed only direction is wanted here
-              ), setSpringTarget, swipeRequirementType)
+              await animateOut(
+                {x: gesture.vx, y: gesture.vy},
+                setSpringTarget,
+                dir
+              )
               if (onCardLeftScreen) onCardLeftScreen(dir)
               return
             }
@@ -172,10 +197,6 @@ const TinderCard = React.forwardRef(
       let isClicking = false
 
       element.current.addEventListener(('touchstart'), (ev) => {
-        if (!ev.srcElement.className.includes('pressable') && ev.cancelable) {
-          ev.preventDefault()
-        }
-
         const gestureState = gestureStateFromWebEvent(ev, startPositon, lastPosition, true)
         lastPosition = gestureState
         startPositon = { x: ev.touches[0].clientX, y: ev.touches[0].clientY }
@@ -207,9 +228,14 @@ const TinderCard = React.forwardRef(
 
         // use guestureState.vx / guestureState.vy for velocity calculations
         // translate element
-        let rot = gestureState.vx * 15 // Magic number 15 looks about right
-        rot = Math.max(Math.min(rot, settings.maxTilt), -settings.maxTilt)
-        setSpringTarget.start({ xyrot: [gestureState.dx, gestureState.dy, rot], config: physics.touchResponsive })
+        setSpringTarget.start({
+          xyrot: [
+            gestureState.dx,
+            gestureState.dy,
+            rotateByDx(gestureState.dx)
+          ],
+          immediate: true
+        })
       }
 
       window.addEventListener(('mousemove'), (ev) => {
@@ -228,6 +254,10 @@ const TinderCard = React.forwardRef(
       })
 
       element.current.addEventListener(('touchmove'), (ev) => {
+        if (ev.cancelable) {
+          ev.preventDefault()
+        }
+
         const gestureState = gestureStateFromWebEvent(ev, startPositon, lastPosition, true)
         lastPosition = gestureState
         handleMove(gestureState)
@@ -238,7 +268,7 @@ const TinderCard = React.forwardRef(
         startPositon = { x: 0, y: 0 }
         lastPosition = { dx: 0, dy: 0, vx: 0, vy: 0, timeStamp: Date.now() }
       })
-    })
+    }, [])
 
     const element = React.useRef()
 
@@ -247,12 +277,65 @@ const TinderCard = React.forwardRef(
         ref: element,
         className,
         style: {
-          transform: xyrot.to((x, y, rot) => `translate3d(${x}px, ${y}px, ${0}px) rotate(${rot}deg)`)
+          transform: xyrot.to((x, y, rot) => `translate3d(${x}px, ${y}px, ${0}px) rotate(${rot}deg)`),
+          ...containerStyle
         },
-        children
+        children: [
+          React.createElement(AnimatedDiv, {
+            key: 1,
+            style: {
+              position: 'absolute',
+              width: '100%',
+              height: '100%',
+              zIndex: xyrot.to((x, y) => Math.round(Math.abs(x))),
+              opacity: xyrot.to((x, y) =>
+                getSwipeDirection({x, y}, 0) === 'left' ?
+                  Math.max(0.0, -x * 0.01 - 0.5) :
+                  0.0
+              ),
+              transform: xyrot.to((x, y, rot) => `rotate(${-rot}deg)`)
+            },
+            children: leftComponent
+          }),
+          React.createElement(AnimatedDiv, {
+            key: 2,
+            style: {
+              position: 'absolute',
+              width: '100%',
+              height: '100%',
+              zIndex: xyrot.to((x, y) => Math.round(Math.abs(x))),
+              opacity: xyrot.to((x, y) =>
+                getSwipeDirection({x, y}, 0) === 'right' ?
+                  Math.max(0.0, x * 0.01 - 0.5) :
+                  0.0
+              ),
+              transform: xyrot.to((x, y, rot) => `rotate(${-rot}deg)`)
+            },
+            children: rightComponent
+          }),
+          React.createElement(AnimatedDiv, {
+            key: 3,
+            style: {
+              position: 'absolute',
+              width: '100%',
+              height: '100%',
+              zIndex: xyrot.to((x, y) => Math.round(Math.abs(y))),
+              opacity: xyrot.to((x, y) =>
+                getSwipeDirection({x, y}, 0) === 'down' ?
+                  Math.max(0.0, y * 0.01 - 0.5) :
+                  0.0
+              ),
+              transform: xyrot.to((x, y, rot) => `rotate(${-rot}deg)`)
+            },
+            children: downComponent
+          }),
+          children,
+        ]
       })
     )
   }
 )
 
-module.exports = TinderCard
+module.exports = {
+  TinderCard,
+}
diff --git a/node_modules/react-tinder-card/index.native.js b/node_modules/react-tinder-card/index.native.js
index f443f57..f351a8e 100644
--- a/node_modules/react-tinder-card/index.native.js
+++ b/node_modules/react-tinder-card/index.native.js
@@ -4,23 +4,19 @@ const { useSpring, animated } = require('@react-spring/native')
 const { height, width } = Dimensions.get('window')
 
 const settings = {
-  maxTilt: 25, // in deg
+  maxTilt: 20, // in deg
   rotationPower: 50,
-  swipeThreshold: 1 // need to update this threshold for RN (1.5 seems reasonable...?)
+  swipeThreshold: 0.5 // need to update this threshold for RN (1.5 seems reasonable...?)
 }
 
 // physical properties of the spring
 const physics = {
-  touchResponsive: {
-    friction: 50,
-    tension: 2000
-  },
   animateOut: {
     friction: 30,
     tension: 400
   },
   animateBack: {
-    friction: 10,
+    friction: 20,
     tension: 200
   }
 }
@@ -34,18 +30,39 @@ const normalize = (vector) => {
   return { x: vector.x / length, y: vector.y / length }
 }
 
-const animateOut = async (gesture, setSpringTarget) => {
-  const diagonal = pythagoras(height, width)
-  const velocity = pythagoras(gesture.x, gesture.y)
-  const finalX = diagonal * gesture.x
-  const finalY = diagonal * gesture.y
-  const finalRotation = gesture.x * 45
-  const duration = diagonal / velocity
+const rotateByDx = (dx) => {
+  return Math.max(Math.min(dx * 0.05, settings.maxTilt), -settings.maxTilt)
+}
+
+const finalXyrot = (gesture) => {
+  const finalX = diagonal() * normalize(gesture).x
+  const finalY = diagonal() * normalize(gesture).y
+  const finalRotation = rotateByDx(finalX)
+
+  return {x: finalX, y: finalY, rot: finalRotation};
+}
+
+const diagonal = () => pythagoras(height, width)
+
+const animateOut = async (gesture, setSpringTarget, dir) => {
+  const normalizedGesture = (() => {
+    if (dir === 'right')
+      return { x: Math.max( 2, gesture.x), y: gesture.y }
+    if (dir === 'left')
+      return { x: Math.min(-2, gesture.x), y: gesture.y }
+    if (dir === 'up')
+      return { x: gesture.x              , y: Math.min(-2, gesture.y) }
+    if (dir === 'down')
+      return { x: gesture.x              , y: Math.max( 2, gesture.y) }
+
+    return gesture
+  })();
+
+  const velocity = pythagoras(normalizedGesture.x, normalizedGesture.y)
+  const duration = diagonal() / velocity
 
   setSpringTarget.current[0].start({
-    x: finalX,
-    y: finalY,
-    rot: finalRotation, // set final rotation value based on gesture.vx
+    ...finalXyrot(normalizedGesture),
     config: { duration: duration }
   })
 
@@ -64,17 +81,20 @@ const animateBack = (setSpringTarget) => {
   })
 }
 
-const getSwipeDirection = (property) => {
+const getSwipeDirection = (
+  property,
+  swipeThreshold = settings.swipeThreshold
+) => {
   if (Math.abs(property.x) > Math.abs(property.y)) {
-    if (property.x > settings.swipeThreshold) {
+    if (property.x > swipeThreshold) {
       return 'right'
-    } else if (property.x < -settings.swipeThreshold) {
+    } else if (property.x < -swipeThreshold) {
       return 'left'
     }
   } else {
-    if (property.y > settings.swipeThreshold) {
+    if (property.y > swipeThreshold) {
       return 'down'
-    } else if (property.y < -settings.swipeThreshold) {
+    } else if (property.y < -swipeThreshold) {
       return 'up'
     }
   }
@@ -86,30 +106,35 @@ const AnimatedView = animated(View)
 
 const TinderCard = React.forwardRef(
   (
-    { flickOnSwipe = true, children, onSwipe, onCardLeftScreen, className, preventSwipe = [], swipeRequirementType = 'velocity', swipeThreshold = settings.swipeThreshold, onSwipeRequirementFulfilled, onSwipeRequirementUnfulfilled },
+    { flickOnSwipe = true, children, onSwipe, onCardLeftScreen, className, preventSwipe = [], swipeRequirementType = 'velocity', swipeThreshold = settings.swipeThreshold, onSwipeRequirementFulfilled, onSwipeRequirementUnfulfilled, containerStyle, initialPosition, leftComponent, rightComponent, downComponent },
     ref
   ) => {
+    const startPosition = (() => {
+      if (initialPosition === 'left')  return finalXyrot({x: -1, y:  0})
+      if (initialPosition === 'right') return finalXyrot({x:  1, y:  0})
+      if (initialPosition === 'up')    return finalXyrot({x:  0, y: -1})
+      if (initialPosition === 'down')  return finalXyrot({x:  0, y:  1})
+      return {x: 0, y: 0, rot: 0};
+    })()
+
     const [{ x, y, rot }, setSpringTarget] = useSpring(() => ({
-      x: 0,
-      y: 0,
-      rot: 0,
-      config: physics.touchResponsive
+      ...startPosition,
     }))
     settings.swipeThreshold = swipeThreshold
 
     React.useImperativeHandle(ref, () => ({
       async swipe (dir = 'right') {
         if (onSwipe) onSwipe(dir)
-        const power = 1.3
+        const power = 2.0
         const disturbance = (Math.random() - 0.5) / 2
         if (dir === 'right') {
           await animateOut({ x: power, y: disturbance }, setSpringTarget)
         } else if (dir === 'left') {
           await animateOut({ x: -power, y: disturbance }, setSpringTarget)
         } else if (dir === 'up') {
-          await animateOut({ x: disturbance, y: power }, setSpringTarget)
-        } else if (dir === 'down') {
           await animateOut({ x: disturbance, y: -power }, setSpringTarget)
+        } else if (dir === 'down') {
+          await animateOut({ x: disturbance, y: power }, setSpringTarget)
         }
         if (onCardLeftScreen) onCardLeftScreen(dir)
       },
@@ -131,12 +156,11 @@ const TinderCard = React.forwardRef(
             if (!preventSwipe.includes(dir)) {
               if (onSwipe) onSwipe(dir)
 
-              await animateOut(swipeRequirementType === 'velocity' ? ({
-                x: gesture.vx,
-                y: gesture.vy
-              }) : (
-                normalize({ x: gesture.dx, y: gesture.dy }) // Normalize to avoid flicking the card away with super fast speed only direction is wanted here
-              ), setSpringTarget, swipeRequirementType)
+              await animateOut(
+                {x: gesture.vx, y: gesture.vy},
+                setSpringTarget,
+                dir
+              )
               if (onCardLeftScreen) onCardLeftScreen(dir)
               return
             }
@@ -154,15 +178,20 @@ const TinderCard = React.forwardRef(
       () =>
         PanResponder.create({
           // Ask to be the responder:
-          onStartShouldSetPanResponder: (evt, gestureState) => true,
-          onStartShouldSetPanResponderCapture: (evt, gestureState) => true,
+          onStartShouldSetPanResponder: (evt, gestureState) => false,
+          onStartShouldSetPanResponderCapture: (evt, gestureState) => false,
           onMoveShouldSetPanResponder: (evt, gestureState) => true,
           onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,
 
           onPanResponderGrant: (evt, gestureState) => {
             // The gesture has started.
             // Probably wont need this anymore as postion i relative to swipe!
-            setSpringTarget.current[0].start({ x: gestureState.dx, y: gestureState.dy, rot: 0, config: physics.touchResponsive })
+            setSpringTarget.current[0].start({
+              x: gestureState.dx,
+              y: gestureState.dy,
+              rot: 0,
+              immediate: true
+            })
           },
           onPanResponderMove: (evt, gestureState) => {
             // Check fulfillment
@@ -183,9 +212,12 @@ const TinderCard = React.forwardRef(
 
             // use guestureState.vx / guestureState.vy for velocity calculations
             // translate element
-            let rot = ((300 * gestureState.vx) / width) * 15// Magic number 300 different on different devices? Run on physical device!
-            rot = Math.max(Math.min(rot, settings.maxTilt), -settings.maxTilt)
-            setSpringTarget.current[0].start({ x: gestureState.dx, y: gestureState.dy, rot, config: physics.touchResponsive })
+            setSpringTarget.current[0].start({
+              x: gestureState.dx,
+              y: gestureState.dy,
+              rot: rotateByDx(gestureState.dx),
+              immediate: true,
+            })
           },
           onPanResponderTerminationRequest: (evt, gestureState) => {
             return true
@@ -208,14 +240,71 @@ const TinderCard = React.forwardRef(
             { translateX: x },
             { translateY: y },
             { rotate: rot.to((rot) => `${rot}deg`) }
-          ]
+          ],
+          ...containerStyle
         }}
         className={className}
       >
+        <AnimatedView
+          style={{
+            position: 'absolute',
+            width: '100%',
+            height: '100%',
+            zIndex: x.to((x) => Math.round(Math.abs(x))),
+            opacity: x.to((x) =>
+              getSwipeDirection({x, y: y.get()}, 0) === 'left' ?
+                Math.max(0.0, - x * 0.01 - 0.5) :
+                0.0
+            ),
+            transform: [
+              { rotate: rot.to((rot) => `${-rot}deg`) }
+            ],
+          }}
+        >
+          {leftComponent}
+        </AnimatedView>
+        <AnimatedView
+          style={{
+            position: 'absolute',
+            width: '100%',
+            height: '100%',
+            zIndex: x.to((x) => Math.round(Math.abs(x))),
+            opacity: x.to((x) =>
+              getSwipeDirection({x, y: y.get()}, 0) === 'right' ?
+                Math.max(0.0, x * 0.01 - 0.5) :
+                0.0
+            ),
+            transform: [
+              { rotate: rot.to((rot) => `${-rot}deg`) }
+            ],
+          }}
+        >
+          {rightComponent}
+        </AnimatedView>
+        <AnimatedView
+          style={{
+            position: 'absolute',
+            width: '100%',
+            height: '100%',
+            zIndex: y.to((y) => Math.round(Math.abs(y))),
+            opacity: y.to((y) =>
+              getSwipeDirection({x: x.get(), y}, 0) === 'down' ?
+                Math.max(0.0, y * 0.01 - 0.5) :
+                0.0
+            ),
+            transform: [
+              { rotate: rot.to((rot) => `${-rot}deg`) }
+            ],
+          }}
+        >
+          {downComponent}
+        </AnimatedView>
         {children}
       </AnimatedView>
     )
   }
 )
 
-module.exports = TinderCard
+module.exports = {
+  TinderCard,
+}
